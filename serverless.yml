org: antoniojunior
app: serverless-project
service: serveless-project

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverlessUser
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    queueName: ${self:custom.queueName}
    email: ${self:custom.email}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - sqs:*
        - ses:*
      Resource: '*'
  apiKeys:
    - free:
      - freeApiKey
  usagePlan:
    - free:
        quota:
          limit: 50
          period: DAY
        throttle:
          rateLimit: 5
          burstLimit: 20

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  bucketName: serveless-project-${opt:stage, 'dev'}-bucket
  queueName: serveless-project-sqs
  email: ${opt:email}
  s3Sync:
      - bucketName: ${self:custom.bucketName}
        localDir: UploadData

functions:
  getPlayerScore:
    handler: lambdas/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true
  setPlayerScore:
    handler: lambdas/setPlayerScore.handler
    events:
      - http:
          path: set-player-score
          method: POST
          cors: true
          private: true
  deletePlayer:
    handler: lambdas/deletePlayer.handler
    events:
      - http:
          path: delete-player
          method: POST
          cors: true
          private: true
  processFile:
    handler: lambdas/processFile.handler
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: files/
            - suffix: .txt
          existing: true
  saveContent:
    handler: lambdas/saveContent.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MyQueue
              - Arn
  dynamodb-trigger:
    handler: lambdas/readDynamoStream.handler
    maximumRetryAttempts: 0
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - MyDynamoDBTable
              - StreamArn

resources:
 Resources:
   MyQueue:
     Type: "AWS::SQS::Queue"
     Properties:
       QueueName: ${self:custom.queueName}
   MyS3Bucket:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: ${self:custom.bucketName}
   MyDynamoDBTable:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: ${self:custom.tableName}
       AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
       KeySchema:
          - AttributeName: ID
            KeyType: HASH
       ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
       StreamSpecification:
        StreamViewType: NEW_IMAGE
   DynamoDBAlarmConsumedReadUnits:
     Type: AWS::CloudWatch::Alarm
     Properties:
      AlarmDescription: DynamoDB ConsumedReadUnits
      Namespace: AWS/DynamoDB
      MetricName: ConsumedReadCapacityUnits
      Statistic: Sum
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Period: 60
      Dimensions:
        - Name: TableName
          Value: ${self:custom.tableName}
      AlarmActions:
        - Ref: TopicCloudwatchAlarm
   TopicCloudwatchAlarm:
     Type: AWS::SNS::Topic
     Properties:
      TopicName: ${self:service}-${opt:stage, 'dev'}-topic-cloudwatch-alarm
   TopicCloudwatchAlarmSubscription:
     Type: AWS::SNS::Subscription
     Properties:
      Endpoint: ${self:custom.email}
      Protocol: email
      TopicArn:
        Ref: TopicCloudwatchAlarm