service: serveless-project

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverlessUser
  region: ${self:custom.region}
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    region: ${self:custom.region}
  apiGateway:
    shouldStartNameWithService: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
      Resource: '*'
  apiKeys:
    - free:
      - freeApiKey
  usagePlan:
    - free:
        quota:
          limit: 5
          period: DAY
        throttle:
          rateLimit: 5
          burstLimit: 20

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: player-points
  bucketName: serveless-project-dev-hello-bucket
  region: us-east-1
  s3Sync:
      - bucketName: serveless-project-dev-hello-bucket
        localDir: UploadData

functions:
  getUser:
    handler: lambdas/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
          private: true
  getPlayerScore:
    handler: lambdas/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true
  setPlayerScore:
    handler: lambdas/setPlayerScore.handler
    events:
      - http:
          path: set-player-score
          method: POST
          cors: true
  createFile:
    handler: lambdas/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true

resources:
 Resources:
   NewResource:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: ${self:custom.bucketName}
   MyDynamoDBTable:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: ${self:custom.tableName}
       AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
       KeySchema:
          - AttributeName: ID
            KeyType: HASH
       BillingMode: PAY_PER_REQUEST